from django.db import models
from django.contrib.auth import get_user_model

import mimetypes
import uuid

def file_upload_path(instance, filename) -> str:
    """Generate upload path for a File object

    Args:
        instance (File): File object to generate path for
        filename (str): Original filename of the file

    Returns:
        str: Upload path for the file
    """

    return f"content/{instance.conversion.id}/{instance.id}/{filename}"

class File(models.Model):
    """Model for files downloaded or generated by PIX360

    Attributes:
        id (UUIDField): UUID of the file
        file (FileField): File object containing the file
        conversion (ForeignKey): Conversion object that this file belongs to
        is_result (BooleanField): Whether this file is the result of a conversion
    """

    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
    file = models.FileField(upload_to=file_upload_path)
    mime_type = models.CharField(max_length=256, default="application/octet-stream")
    conversion = models.ForeignKey(to='Conversion', on_delete=models.SET_NULL, null=True, blank=True)
    is_result = models.BooleanField(default=False)

class ConversionStatus(models.IntegerChoices):
    """Enum for conversion statuses

    Attributes:
        PENDING (int): Conversion is pending
        PROCESSING (int): Conversion is processing
        DONE (int): Conversion is done
        FAILED (int): Conversion has failed
    """

    PENDING = 0
    PROCESSING = 1
    DONE = 2
    FAILED = -1
    DISMISSED = -2

    DOWNLOADING = 10
    STITCHING = 11

class Conversion(models.Model):
    """Model for conversions performed by PIX360

    Attributes:
        id (UUIDField): UUID of the conversion
        url (URLField): URL of the content to convert
        downloader (CharField): Downloader module used to download the content
        user (ForeignKey): User who requested the conversion
        properties (JSONField): Properties of the conversion
        status (IntegerField): Status of the conversion (see ConversionStatus)
        log (TextField): Log of the conversion
    """

    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
    title = models.CharField(max_length=256, null=True, blank=True)
    url = models.URLField()
    downloader = models.CharField(max_length=256, null=True, blank=True)
    user = models.ForeignKey(to=get_user_model(), on_delete=models.SET_NULL, null=True, blank=True)
    properties = models.JSONField(null=True, blank=True)
    status = models.IntegerField(choices=ConversionStatus.choices, default=ConversionStatus.PENDING)
    log = models.TextField(null=True, blank=True)

    @property
    def result(self) -> File:
        """Get the result file of this conversion

        Returns:
            File: Result file of this conversion

        Raises:
            File.DoesNotExist: If no result file exists
        """
        return File.objects.get(conversion=self, is_result=True)

    def get_result_filename(self) -> str:
        """Get the final filename for the result file

        Returns:
            str: Filename for the result file

        Raises:
            File.DoesNotExist: If no result file exists
        """
        
        basename = "".join([c for c in self.title if c.isalnum() or c in "._- "])
        extension = mimetypes.guess_extension(self.result.mime_type)
        return f"{basename}{extension}"